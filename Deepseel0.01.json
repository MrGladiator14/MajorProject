[
    {
      "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nDeclare a module named \"Anagram\" exporting the function \"anagramsFor\".\nImport the \"Data.List\" module for list manipulation functions.\nImport the \"Data.Char\" module for character manipulation functions.\nDeclare a function named \"lower\" converting all characters of a String to lowercase.\nDefine the \"lower\" function using \"map\" and \"toLower\" for lowercase conversion.\nDeclare a function named \"normalize\" to convert a String to lowercase and sort its characters.\nDefine the \"normalize\" function using function composition with \"sort\" and \"lower\".\nDeclare a function named \"anagram\" to check if two Strings are anagrams.\nDefine the \"anagram\" function to compare lowercase versions and sorted versions of input Strings.\nDeclare a function named \"anagramsFor\" to find anagrams of a String in a list of Strings.\nDefine the \"anagramsFor\" function using \"filter\" to select anagrams from the input list based on the \"anagram\" function.\nOutput:\n",
      "base_model": "import Data.List (sort, filter)\nimport Data.Char (toLower)\n\nlower :: String -> String\nlower = map toLower\n\nnormalize :: String -> String\nnormalize = sort . lower\n\nanagram :: String -> String -> Bool\nanagram x y = x == y\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor target = filter ((== target) . normalize)\n\n",
      "peft_model_v1": "import Data.List (sort, filter)\nimport Data.Char (toLower)\n\nlower :: String -> String\nlower = map toLower\n\nnormalize :: String -> String\nnormalize = sort . lower\n\nanagram :: String -> String -> Bool\nanagram x y = x == y\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor target = filter ((== target) . normalize)\n\n",
      "peft_model_v2": "import Data.List (sort, filter)\nimport Data.Char (toLower)\n\nlower :: String -> String\nlower = map toLower\n\nnormalize :: String -> String\nnormalize = sort . lower\n\nanagram :: String -> String -> Bool\nanagram x y = x == y\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor target = filter ((== target) . normalize)\n\n"
    },
    {
      "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nDeclare a module named Clock and make sure to export three functions: addDelta, fromHourMin, and toString.\nImport the printf function from the Text.Printf module for string formatting.\nDefine a data type named Clock. It should have a single field dayMins of type Int, indicating the number of minutes since midnight. Make sure to automatically generate equality comparisons for Clock instances.\nTake hours and minutes as arguments and return a Clock object representing that time. Calculate the total minutes since midnight and ensure the time wraps around if it exceeds a day.\nTake a Clock object and return a formatted string representing the time in the format \"HH:MM\". Extract the dayMins field and format it using printf, padding the hour and minute components with zeros if necessary.\nTake hours, minutes, and a Clock object as arguments. Return a new Clock object representing the time after adding the specified delta. Add the delta to the current number of minutes since midnight, handle wrapping around if necessary, and construct a new Clock object with the updated time.\nOutput:\n",
      "base_model": "addDelta hours minutes clock = Clock (((dayMins + d) % 24'0') * 60 + m) where ...\n\ntoHourMin clock = ((dayMins' :: Int) / 60) where ...\n\ntoStr clock = printf \"%02d:%02d\" h m where ...\n\nModule name: Clock\n\nModule exports: addDelta, fromHourMin, toStr\n\nData Clock = Clock {dayMins :: Int}\n\nModule attributes:\n\ninstance Num Clock where ...\n\ninstance Eq Clock\n\ninstance Ord Clock\n\naddDelta hours minutes clock = Clock (((dayMins + d) % 24'0') * 60 + m) where ...\n\nfromHourMin hour min clock = Clock ((hour - 12'0') * 60 + min) where ...\n\ntoStr clock = printf \"%02d:%02d\" h m where ...\n\nModule end\n\n<｜end▁of▁sentence｜>",
      "peft_model_v1": "addDelta hours minutes clock = Clock (((dayMins + d) % 24'0') * 60 + m) where ...\n\nfromHourMin hour min = Clock (hour' * 60 + min') where ...\n\ntoStr hour min = printf \"%02d:%02d\" hour min where ...\n\nEnd Import\n\nDefine a type alias for Clock -> String, which represents a function taking a Clock object and returning a formatted string.\ntype Clock -> String\n\nEnd Def\n\nEnd Module\n\n<｜end▁of▁sentence｜>",
      "peft_model_v2": "addDelta hours minutes clock = Clock (((dayMins + d) % 24'0') * 60 + m) where ...\n\ntoHourMin clock = ((dayMins' :: Int) / 60) where ...\n\ntoStr clock = printf \"%02d:%02d\" h m where ...\n\nModule name: Clock\n\nModule exports: addDelta, fromHourMin, toStr\n\nData Clock = Clock {dayMins :: Int}\n\nModule attributes:\n\ninstance Num Clock where ...\n\ninstance Eq Clock\n\ninstance Ord Clock\n\naddDelta hours minutes clock = Clock (((dayMins + d) % 24'0') * 60 + m) where ...\n\nfromHourMin hour min clock = Clock ((hour - 12'0') * 60 + min) where ...\n\ntoStr clock = printf \"%02d:%02d\" h m where ...\n\nModule end\n\n<｜end▁of▁sentence｜>"
    },
    {
      "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nDeclare a module named \"Hamming\".\nExport only the distance function from the module.\nDefine the type signature of the distance function as taking two strings as input and returning a Maybe Int.\nImplement the distance function to:\nCheck if the lengths of the input strings are equal.\nIf not, return Nothing.\nIf equal, calculate the Hamming distance between the strings:\nPair each character of the strings.\nFilter the pairs to keep only those with differing characters.\nCount the number of differing characters to get the Hamming distance.\nWrap the distance in a Just constructor and return it.\nOutput:\n",
      "base_model": "distance x y = if length x /= length y then Nothing else Just $ length $ filter (\\(a,b) -> a /= b) $ zip x y\n\n<｜end▁of▁sentence｜>",
      "peft_model_v1": "distance x y = if length x /= length y then Nothing else Just $ length $ filter (\\(a,b) -> a /= b) $ zip x y\n\n<｜end▁of▁sentence｜>",
      "peft_model_v2": "distance x y = if length x /= length y then Nothing else Just $ length $ filter (\\(a,b) -> a /= b) $ zip x y\n\n<｜end▁of▁sentence｜>"
    },
    {
      "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nDeclare a module named Luhn and export the function isValid.\nImport the Data.Char module for character and string manipulation functions.\nDefine a function called double that takes a String and returns another String.\nCall a helper function construct with the reversed input string s and an initial counter value of 1.\nImplement the construct helper function to process the reversed string by doubling every second digit starting from the rightmost digit. Recursively process the rest of the string.\nDefine a function named sumS that takes a String and returns an Int.\nImplement the sumS function to convert each character in the input string to its corresponding integer value, then calculate the sum of these integers.\nDefine a function named isValid that takes a String and returns a Bool.\nImplement the isValid function to check whether the input string represents a valid Luhn number. Filter out all non-digit characters, double every second digit, calculate the sum of all digits, and check if the sum is divisible by 10. Ensure that the normalized string is not \"0\". If both conditions are true, return True; otherwise, return False.\nOutput:\n",
      "base_model": "module Luhn where\n\nimport Data.Char (isDigit)\n\ndouble :: String -> String\ndouble s = zipWith (\\c d -> c, s) [0..] s\n\nsumS :: String -> Int\nsumS = sum . map (read . filter isDigit -)\n\nisValid :: String -> Bool\nisValid = (>0) . sumS . double\n\n",
      "peft_model_v1": "module Luhn where\n\nimport Data.Char (isDigit)\n\ndouble :: String -> String\ndouble s = zipWith (\\c d -> c, s) [0..] s\n\nsumS :: String -> Int\nsumS = sum . map (read . filter isDigit -)\n\nisValid :: String -> Bool\nisValid = (>0) . sumS . double\n\n",
      "peft_model_v2": "module Luhn where\n\nimport Data.Char (isDigit)\n\ndouble :: String -> String\ndouble s = zipWith (\\c d -> c, s) [0..] s\n\nsumS :: String -> Int\nsumS = sum . map (read . filter isDigit -)\n\nisValid :: String -> Bool\nisValid = (>0) . sumS . double\n\n"
    },
    {
      "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nDeclare the type signature for the nth function, specifying that it takes an Int as input and returns a Maybe Integer.\nDefine the nth function with pattern matching. If n is less than 1, return Nothing to indicate an invalid input.\nIf n equals 1, return Just 2 to indicate that the first prime number is 2.\nFor any other value of n, calculate the n-th prime number using the isPrime function and the filter function. Filter the list of odd numbers starting from 3, and select the (n - 2)-th element from the resulting list. This is because we’ve already covered the cases where n is less than or equal to 1, and the index of the first prime number (2) is 0.\nDefine the isPrime function, taking an integer i and returning a boolean indicating whether i is prime. Check whether there are no divisors for i other than 1 and i itself. Iterate over numbers from 3 up to the square root of i (rounded down) and check whether i is divisible by any of them. If none are divisors, i is prime.\nOutput:\n",
      "base_model": "nth i | i < 1 = Nothing\nnth 1 = 2\nnth i | otherwise = filter (\\x -> x 'mod' i /= 0) [3,5..] i\n\n\nA: You can use the iterate function to generate a sequence of numbers starting from 1, and then filter out the even numbers using the (==0) predicate. Then, you can get the nth number from the filtered sequence using the (!!) function.\nimport Data.List (filter)\n\nnth n = filter (==0) (take n (iterate (+2) 1)) ! (n-1)\n\n<｜end▁of▁sentence｜>",
      "peft_model_v1": "nth i | i < 1 = Nothing\nnth 1 = 2\nnth i | otherwise = filter (\\x -> x 'mod' i /= 0) [3,5..] i\n\n\nA: You can use the iterate function to generate a sequence of numbers starting from 1, and then filter out the even numbers using the (==0) predicate. Then, you can get the nth number from the filtered sequence using the (!!) function.\nimport Data.List (filter)\n\nnth n = filter (==0) (take n (iterate (+2) 1)) ! (n-1)\n\n<｜end▁of▁sentence｜>",
      "peft_model_v2": "nth i | i < 1 = Nothing\nnth 1 = 2\nnth i | otherwise = filter (\\x -> x 'mod' i /= 0) [3,5..] i\n\n\nA: You can use the iterate function to generate a sequence of numbers starting from 1, and then filter out the even numbers using the (==0) predicate. Then, you can get the nth number from the filtered sequence using the (!!) function.\nimport Data.List (filter)\n\nnth n = filter (==0) (take n (iterate (+2) 1)) ! (n-1)\n\n<｜end▁of▁sentence｜>"
    },
    {
      "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nDefine a Haskell module named GameOfLife with tick as its exported function.\nImplement the tick function, which takes a 2D list of integers ([[Int]]) representing the current state of the grid and returns a new 2D list of integers representing the next state after one iteration.\nUse list comprehensions to iterate over each cell in the input matrix.\nInside the list comprehension, define a nested function turnCell that takes the coordinates (x, y) of a cell and returns its new state based on the rules of the Game of Life.\nUse pattern matching within turnCell to handle the current state of the cell (either 0 or 1).\nIf the current cell is dead (0), use a conditional expression to determine its next state based on the number of live neighbors.\nIf the current cell is alive (1), use another conditional expression to determine its next state based on the number of live neighbors.\nImplement a helper function countLive that takes the coordinates (x, y) of a cell and calculates the number of live neighbors it has.\nInside countLive, use list comprehensions to iterate over the neighboring cells and sum their values.\nEnsure that cells at the edge of the grid are correctly handled by checking that their coordinates are within the valid range.\nDefine a list indices containing the valid indices for both rows and columns of the matrix.\nUse this indices list to ensure that when calculating neighboring cell coordinates, they stay within the bounds of the matrix.\nMake sure to exclude the current cell from the neighbor count calculation.\nFinally, return the new matrix generated by applying turnCell to each cell in the input matrix.\nOutput:\n",
      "base_model": "gameOfLife :: [[Int]] -> [[Int]]\n\n",
      "peft_model_v1": "gameOfLife :: [[Int]] -> [[Int]]\n\n",
      "peft_model_v2": "gameOfLife :: [[Int]] -> [[Int]]\n\n"
    },
    {
      "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nCreate a Haskell module named Triangle to encapsulate the functions related to generating Pascal’s triangle.\nDefine the type signature of the rows function. It should take an integer n as input and return a list of lists of integers ([[Integer]]).\nImplement the rows function using list comprehension or higher-order functions like take and map.\nrows should generate the first n rows of Pascal’s triangle.\nDefine a list named pascal, which represents the entire Pascal’s triangle.\nStart with the first row.\nDefine a helper function named next to generate the next row of Pascal’s triangle based on the current row.\nIt should take a list as input and return the next row of Pascal’s triangle.\nUse zipWith to perform element-wise addition of consecutive elements from the current row.\nEnsure to append 0 at the end and prepend 0 at the beginning of the current row before applying zipWith. This accounts for the edges of Pascal’s triangle.\nEnsure that the rows function returns the first n rows of Pascal’s triangle as a list of lists of integers.\nOutput:\n",
      "base_model": "rows n = take n (drop 1 (zipWith (+) (map (const 1) (take n (drop 1 [1..]))) (map (+1) (take (n-1) (drop 1 [1..]))) ) )\n\nEnd of output.\n\nEnd of module.\n\n<｜end▁of▁sentence｜>",
      "peft_model_v1": "rows n = take n (drop 1 (zipWith (+) (map (const 1) (take n (drop 1 [1..]))) (map (+1) (take (n-1) (drop 1 [1..]))) ) )\n\nEnd of output.\n\nEnd of module.\n\n<｜end▁of▁sentence｜>",
      "peft_model_v2": "rows n = take n (drop 1 (zipWith (+) (map (const 1) (take n (drop 1 [1..]))) (map (+1) (take (n-1) (drop 1 [1..]))) ) )\n\nEnd of output.\n\nEnd of module.\n\n<｜end▁of▁sentence｜>"
    },
    {
      "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nDefine a Haskell module named Queens. Start with the declaration: \"Create a module named Queens.\"\nFunction Export: Export two functions from the module: boardString and canAttack. Begin with: \"Export two functions, boardString and canAttack, from the module.\"\ndefine boardString Function. This function takes two arguments, both of type Maybe (Int, Int), representing the positions of a white queen and a black queen on an 8x8 chessboard, respectively.\nTo implement boardString, start with: \"Define the function boardString.\"\nUse unlines to concatenate the rows of the board with newline characters. Begin with: \"Concatenate rows using unlines.\"\nUtilize unwords to concatenate the elements within each row with spaces. Begin with: \"Concatenate elements within rows using unwords.\"\nGenerate the board using a nested list comprehension, iterating over rows and columns. Start with: \"Generate the board using nested list comprehensions.\"\nImplement a helper function board to determine the value at each position on the board. Begin with: \"Define a helper function named board.\"\nUse pattern matching within the board function to determine the content of each square on the board. Start with: \"Pattern match within the board function to determine square content.\"\ndefine canAttack Function. This function takes two arguments, both of type (Int, Int), representing the positions of two queens on the chessboard.\nTo implement canAttack, start with: \"Define the function canAttack.\"\nCalculate the differences between the row and column indices of the two positions. Begin with: \"Calculate differences between row and column indices.\"\nCheck if the queens are in the same row, column, or diagonal. Start with: \"Check if queens are in the same row, column, or diagonal.\" \nOutput:\n",
      "base_model": "\"Output: \"\nend module Queens\n\n<｜end▁of▁sentence｜>",
      "peft_model_v1": "\"Output: \"\nend module Queens\n\n<｜end▁of▁sentence｜>",
      "peft_model_v2": "\"Output: \"\nend module Queens\n\n<｜end▁of▁sentence｜>"
    },
    {
      "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nImplement a Haskell module named Knapsack.\nDefine a function named maximumValue inside the module.\nThe maximumValue function should take two arguments: an integer representing the weight limit and a list of tuples where each tuple contains two integers representing the weight and value of an item.\nInside the maximumValue function, define a helper function named go using the where clause.\nThe go function should take two arguments: an integer representing the weight limit and a list of tuples similar to the input of maximumValue.\nImplement pattern matching in the go function to handle two cases: when the list of tuples is empty and when it’s not empty.\nIf the list of tuples is empty, return 0.\nIf the weight of the first item in the list exceeds the weight limit, recursively call go with the same limit and the rest of the list.\nOtherwise, recursively call go with the updated limit (subtracting the weight of the first item) and the rest of the list, and compare the sum of the value of the first item and the result of the recursive call with the result of the recursive call without including the first item.\nReturn the maximum value obtained from the above comparison.\nOutput:\n",
      "base_model": "maximumValue i [] = 0\nmaximumValue i ((w,v):ts) | w > i = maximumValue (w-w) ts\n                           | otherwise = maximum (v + go (i-w) ts)\n\n",
      "peft_model_v1": "maximumValue i [] = 0\nmaximumValue i ((w,v):ts) | w > i = maximumValue (w-w) ts\n                           | otherwise = maximum (v + go (i-w) ts)\n\n",
      "peft_model_v2": "maximumValue i [] = 0\nmaximumValue i ((w,v):ts) | w > i = maximumValue (w-w) ts\n                           | otherwise = maximum (v + go (i-w) ts)\n\n"
    },
    {
      "prompt": "Instruct: You are a helpful assistant proficient in Haskell programming language. Please generate code strictly in Haskell based on the following descriptions and instructions.\nWrite a function that takes a string representing a word problem and returns its answer as an integer, using Haskell.\nImport the necessary module to handle reading from strings.\nDefine a function named answer that takes a string and returns Maybe Int.\nInside the answer function, use a case expression to handle the different cases based on the last character of the input string.\nIf the last character is a question mark, call a helper function to process the words of the question.\nDefine a helper function named answerWords that takes a list of strings and returns Maybe Int.\nPattern match on the list of strings to extract the relevant parts of the word problem.\nUse the readMaybe function to parse the numeric value from the string.\nImplement a helper function named evaluate to recursively evaluate the word problem.\nUse pattern matching and guards to handle different operations such as addition, subtraction, multiplication, and division.\nEnsure that the function returns Nothing if any operation fails or if the input is not in the expected format.\nOutput:\n",
      "base_model": "answer input = case dropLast 1 input of\n                  \"+\": xs -> maybe (maybe 0 (+) (readMaybe :: String -> Maybe Int) xs) (\\y -> maybe (Just y) Nothing (readMaybe (dropLast 1 input)\n                                                  )\n                  \"-\": xs -> maybe (maybe 0 (-) (readMaybe :: String -> Maybe Int) xs) (\\y -> maybe (Just y) Nothing (readMaybe (dropLast 1 input)\n                                                  )\n                  \"*\": xs -> maybe (maybe 0 (*) (readMaybe :: String -> Maybe Int) xs) (\\y -> maybe (Just y) Nothing (readMaybe (dropLast 1 input)\n                                                  )\n                  \"/\": xs -> maybe (maybe 0 (/ ) (readMaybe :: String -> Maybe Int) xs) (\\y -> maybe (Just y) Nothing (readMaybe (dropLast 1 input)\n                                                  )\n                  _: xs -> Nothing\n                  [] -> Nothing\n                  \"quit\": _ -> Nothing\n                  \"end\": _ -> Nothing\n                  \"\": xs -> Nothing\n                  _ -> Nothing\n                  where\n                    readMaybe :: String -> Maybe Int\n                    readMaybe = readMaybe\n\nMain:\nmain = do\n  input <- getLine\n  let answer' = answer input\n  case answer' of\n    Nothing -> putStrLn \"Invalid input\"\n    Just n -> putStrLn (show n)\n\nEnd of Main:\n\nEnd of file\n\n<｜end▁of▁sentence｜>",
      "peft_model_v1": "answer input = case dropLast 1 input of\n                  \"+\": xs -> maybe (maybe 0 (+) (readMaybe :: String -> Maybe Int) xs) (\\y -> maybe (Just y) Nothing (readMaybe (dropLast 1 input)\n                                                  )\n                  \"-\": xs -> maybe (maybe 0 (-) (readMaybe :: String -> Maybe Int) xs) (\\y -> maybe (Just y) Nothing (readMaybe (dropLast 1 input)\n                                                  )\n                  \"*\": xs -> maybe (maybe 0 (*) (readMaybe :: String -> Maybe Int) xs) (\\y -> maybe (Just y) Nothing (readMaybe (dropLast 1 input)\n                                                  )\n                  \"/\": xs -> maybe (maybe 0 (/ ) (readMaybe :: String -> Maybe Int) xs) (\\y -> maybe (Just y) Nothing (readMaybe (dropLast 1 input)\n                                                  )\n                  _: xs -> Nothing\n                  [] -> Nothing\n                  \"quit\": _ -> Nothing\n                  \"end\": _ -> Nothing\n                  \"\": xs -> Nothing\n                  _ -> Nothing\n                  where\n                    readMaybe :: String -> Maybe Int\n                    readMaybe = readMaybe\n\nMain:\nmain = do\n  input <- getLine\n  let answer' = answer input\n  case answer' of\n    Nothing -> putStrLn \"Invalid input\"\n    Just n -> putStrLn (show n)\n\nEnd:\nEnd\n\nEnd:\nEnd\n\nEnd:\nEnd\n\nEnd:\nEnd\n\nEnd:\nEnd\n\nEnd:\nEnd\n\nEnd:\nEnd\n\nEnd:\nEnd\n\nEnd:\nEnd\n\nEnd:\nEnd\n\nEnd:\nEnd\n\nEnd:\nEnd\n\nEnd:\nEnd\n\nEnd:\nEnd\n\nEnd:\nEnd\n\nEnd:\nEnd\n\nEnd:\nEnd\n\nEnd:\nEnd\n\nEnd:\nEnd\n\nEnd:\nEnd",
      "peft_model_v2": "answer input = case dropLast 1 input of\n                  \"+\": xs -> maybe (maybe 0 (+) (readMaybe :: String -> Maybe Int) xs) (\\y -> maybe (Just y) Nothing (readMaybe (dropLast 1 input)\n                                                  )\n                  \"-\": xs -> maybe (maybe 0 (-) (readMaybe :: String -> Maybe Int) xs) (\\y -> maybe (Just y) Nothing (readMaybe (dropLast 1 input)\n                                                  )\n                  \"*\": xs -> maybe (maybe 0 (*) (readMaybe :: String -> Maybe Int) xs) (\\y -> maybe (Just y) Nothing (readMaybe (dropLast 1 input)\n                                                  )\n                  \"/\": xs -> maybe (maybe 0 (/ ) (readMaybe :: String -> Maybe Int) xs) (\\y -> maybe (Just y) Nothing (readMaybe (dropLast 1 input)\n                                                  )\n                  _: xs -> Nothing\n                  [] -> Nothing\n                  \"quit\": _ -> Nothing\n                  \"end\": _ -> Nothing\n                  \"\": xs -> Nothing\n                  _ -> Nothing\n                  where\n                    readMaybe :: String -> Maybe Int\n                    readMaybe = readMaybe\n\nMain:\nmain = do\n  input <- getLine\n  let answer' = answer input\n  case answer' of\n    Nothing -> putStrLn \"Invalid input\"\n    Just n -> putStrLn (show n)\n\nEnd of Main:\n\nEnd of file\n\n<｜end▁of▁sentence｜>"
    }
  ]